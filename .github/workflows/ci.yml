name: CI
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
      - ".changelogrc"
  pull_request:
    branches: [main]
    # TODO: #15 figure out way to only run checks on files than need rebuild
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  MAJOR: 1
  MINOR: 0
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      EXECUTABLE_NAME: ${{ steps.set_output.outputs.EXECUTABLE_NAME }}
      VERSION: "${{ env.MAJOR }}.${{ env.MINOR }}.${{ github.run_number }}"
    steps:
      - uses: actions/checkout@v2
      - name: Set EXECUTABLE_NAME
        id: set_output
        run: |
          sudo apt-get install jq
          echo "::set-output name=EXECUTABLE_NAME::$(jq '.name' .changelogrc | tr -d '"')"

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build_release:
    needs: [setup, check, test, fmt, clippy]
    strategy:
      matrix:
        include:
          - {
              rust: stable,
              os: ubuntu-latest,
              useCross: true,
              target: x86_64-unknown-linux-musl,
              suffix: "",
            }
          - {
              rust: stable,
              os: macos-latest,
              useCross: false,
              target: x86_64-apple-darwin,
              suffix: "",
            }
          - {
              rust: stable,
              os: windows-latest,
              useCross: false,
              target: x86_64-pc-windows-msvc,
              suffix: .exe,
            }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl
      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.useCross }}
          command: build
          args: --release --target=${{ matrix.target }}
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}
          path: ./target/${{ matrix.target }}/release/${{ needs.setup.outputs.EXECUTABLE_NAME }}${{ matrix.suffix }}
          if-no-files-found: error
