name: Release CI
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  MAJOR: 1
  MINOR: 0
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      EXECUTABLE_NAME: ${{ steps.set_output.outputs.EXECUTABLE_NAME }}
      VERSION: "${{ env.MAJOR }}.${{ env.MAJOR }}.${{ github.run_number }}"
    steps:
      - uses: actions/checkout@v2
      - name: Set EXECUTABLE_NAME
        id: set_output
        run: |
          sudo apt-get install jq
          echo "::set-output name=EXECUTABLE_NAME::$(jq '.name' .changelogrc | tr -d '"')"

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build_release:
    needs: [setup, check, test, fmt, clippy]
    strategy:
      matrix:
        include:
          # 32-bit MIPS(-BE) (that is: big endian)
          - {
              rust: stable,
              os: ubuntu-latest,
              useCross: true,
              target: mips-unknown-linux-gnu,
              suffix: "",
            }
          # 64-bit MIPS(-BE) (that is: big endian)
          - {
              rust: stable,
              os: ubuntu-latest,
              useCross: true,
              target: mips64-unknown-linux-gnuabi64,
              suffix: "",
            }
          - {
              rust: stable,
              os: macos-latest,
              useCross: false,
              target: x86_64-apple-darwin,
              suffix: "",
            }
          - {
              rust: stable,
              os: windows-latest,
              useCross: false,
              target: x86_64-pc-windows-msvc,
              suffix: .exe,
            }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: toml-cli
          version: latest
          use-tool-cache: true
      - shell: bash
        env:
          VERSION: ${{ needs.setup.outputs.VERSION }}
        run: |
          TEMP_FILE="$(mktemp)"
          toml set Cargo.toml package.version "$VERSION" > "$TEMP_FILE"
          mv "$TEMP_FILE" Cargo.toml
      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.useCross }}
          command: build
          args: --release --target=${{ matrix.target }}
      - uses: actions/upload-artifact@master
        with:
          name: ${{ needs.setup.outputs.EXECUTABLE_NAME }}_${{ matrix.target }}
          path: ./target/${{ matrix.target }}/release/${{ needs.setup.outputs.EXECUTABLE_NAME }}${{ matrix.suffix }}
          if-no-files-found: error

  release:
    if: github.ref == 'refs/heads/master'
    needs: [build_release]
    env:
      LINUX_64_EXE: mips64-unknown-linux-gnuabi64_${{ needs.setup.outputs.EXECUTABLE_NAME }}/${{ needs.setup.outputs.EXECUTABLE_NAME }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: artifacts/
      - name: Generate Changelog
        id: generate_changelog
        run: |
          artifacts/${{env.LINUX_64_EXE}} merge -v ${{needs.setup.outputs.VERSION}} -d
      - shell: bash
        run: |
          mkdir ./artifacts/release
          shopt -s globstar
          shopt -s extglob
          for input in $(ls -d -- **/changelog-cli?(.*)); do
            filename=$(basename $input)
            if [[ $filename =~ \..{3} ]]
            then
              fileext=${BASH_REMATCH[0]}
            else
              fileext=
            fi
            output="./artifacts/release/$(basename $(dirname $input))$fileext"
            mv $input $output
          done
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        run: |
          gh release create --target ${{env.GITHUB_SHA}} -F CHANGELOG.md v${{ needs.setup.outputs.VERSION }} ./artifacts/release/*
