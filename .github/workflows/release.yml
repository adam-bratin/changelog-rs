name: Release
on:
  workflow_dispatch:
env:
  MAJOR: 1
  MINOR: 0

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      EXECUTABLE_NAME: ${{ steps.set_output.outputs.EXECUTABLE_NAME }}
      VERSION: "${{ env.MAJOR }}.${{ env.MAJOR }}.${{ github.run_number }}"
    steps:
      - uses: actions/checkout@v2
      - name: Set EXECUTABLE_NAME
        id: set_output
        run: |
          sudo apt-get install jq
          echo "::set-output name=EXECUTABLE_NAME::$(jq '.name' .changelogrc | tr -d '"')"
      - name: "Check if user has write access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        with:
          permission: "admin"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_release:
    needs: [setup]
    strategy:
      matrix:
        include:
          - {
              rust: stable,
              os: ubuntu-latest,
              useCross: true,
              target: x86_64-unknown-linux-musl,
              suffix: "",
            }
          - {
              rust: stable,
              os: macos-latest,
              useCross: false,
              target: x86_64-apple-darwin,
              suffix: "",
            }
          - {
              rust: stable,
              os: windows-latest,
              useCross: false,
              target: x86_64-pc-windows-msvc,
              suffix: .exe,
            }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl
      - uses: actions-rs/install@v0.1
        with:
          crate: toml-cli
          version: latest
          use-tool-cache: true
      - shell: bash
        env:
          VERSION: ${{ needs.setup.outputs.VERSION }}
        run: |
          TEMP_FILE="$(mktemp)"
          toml set Cargo.toml package.version "$VERSION" > "$TEMP_FILE"
          mv "$TEMP_FILE" Cargo.toml
      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.useCross }}
          command: build
          args: --release --target=${{ matrix.target }}
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}
          path: ./target/${{ matrix.target }}/release/${{ needs.setup.outputs.EXECUTABLE_NAME }}${{ matrix.suffix }}
          if-no-files-found: error

  release:
    needs: [build_release, setup]
    env:
      LINUX_EXE: artifacts/x86_64-unknown-linux-musl/changelog-cli
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{secrets.CI_PUSH_TOKEN}}
      - uses: actions/download-artifact@v2
        with:
          path: artifacts/
      - shell: bash
        name: Zip exes
        id: zip_exes
        run: |
          shopt -s globstar
          shopt -s extglob
          cd artifacts/
          for input in $(ls -d -- **/changelog-cli?(.*)); do
          chmod +x $input
          zip -j "$(basename $(dirname $input)).zip" $input
          done
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl
      - uses: actions-rs/install@v0.1
        with:
          crate: toml-cli
          version: latest
          use-tool-cache: true
      - shell: bash
        env:
          VERSION: ${{ needs.setup.outputs.VERSION }}
        run: |
          TEMP_FILE="$(mktemp)"
          toml set Cargo.toml package.version "$VERSION" > "$TEMP_FILE"
          mv "$TEMP_FILE" Cargo.toml
          git add Cargo.toml
      - name: Disable Branch Protections
        uses: benjefferies/branch-protection-bot@1.0.5
        id: disable_protections
        if: always()
        with:
          access-token: ${{ secrets.CI_PUSH_TOKEN }}
          enforce_admins: false
          branch: ${{ github.ref }}
      - name: Generate Changelog
        id: generate_changelog
        run: |
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config user.name "$GITHUB_ACTOR"
          ${{ env.LINUX_EXE }} merge -v ${{needs.setup.outputs.VERSION}} -d
          git push
      - name: Enable Branch Protections
        id: enable_protections
        uses: benjefferies/branch-protection-bot@1.0.5
        if: always()
        with:
          access-token: ${{ secrets.CI_PUSH_TOKEN }}
          enforce_admins: true
          branch: ${{ github.ref }}
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.CI_PUSH_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        run: |
          gh release create v${{ needs.setup.outputs.VERSION }} -t v${{ needs.setup.outputs.VERSION }} -F CHANGELOG.md ./artifacts/*.zip --target $(git rev-parse HEAD | xargs)
